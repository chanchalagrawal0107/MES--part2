// routes/reportGenerator.js
const express = require('express');
const router = express.Router();
const { poolPromise, sql } = require('../db/alarmsdb');
const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

// POST /api/reports/generate-pdf
router.post('/reports/generate-pdf', async (req, res) => {
  const { startDate, endDate, username } = req.body;

  try {
    const pool = await poolPromise;
    const result = await pool.request()
      .input('start', sql.Date, startDate)
      .input('end', sql.Date, endDate)
      .query(`
        SELECT * FROM Reports 
        WHERE author_signed_at BETWEEN @start AND @end
        ORDER BY author_signed_at DESC
      `);

    const reports = result.recordset;
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const filename = `report_${timestamp}.pdf`;
    const filePath = path.join(__dirname, '../reports/generated', filename);

    const doc = new PDFDocument();
    doc.pipe(fs.createWriteStream(filePath));

    doc.fontSize(18).text('Generated Report', { align: 'center' });
    doc.moveDown();

    reports.forEach((report, index) => {
      doc.fontSize(12).text(`Report #${index + 1}`, { underline: true });
      doc.text(`Data: ${report.data}`);
      doc.text(`Author: ${report.author}`);
      doc.text(`Created At: ${new Date(report.author_signed_at).toLocaleString()}`);
      doc.moveDown();
    });

    // Add watermark
    const pages = doc.bufferedPageRange();
    for (let i = 0; i < pages.count; i++) {
      doc.switchToPage(i);
      doc.fontSize(10)
        .fillColor('gray')
        .text(`Generated by ${username} on ${new Date().toLocaleString()}`, 50, doc.page.height - 40, {
          align: 'center',
          opacity: 0.6,
        });
    }

    doc.end();
    res.status(200).json({ message: 'PDF generated and saved successfully' });
  } catch (err) {
    console.error('PDF generation error:', err);
    res.status(500).json({ message: 'Failed to generate PDF' });
  }
});

module.exports = router;
